Install kind pour Linux
curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.14.0/kind-linux-amd64
chmod +x ./kind
mv ./kind /usr/bin/kind

###Kind permet de creer un cluster kubernetes dans des conteneurs docker ###
kind create cluster --name <cluster_name>

### Création d'un cluster kind avec une configuration
kind create cluster --name with-config --config ./config-kind/config-kind.yml
kind delete cluster --name <nom_cluster>

### création d'une ressource kubernetes (pod) avec kubectl
kubectl create -f <chemin_description_yml> 

### suppression d'une ressource kubernetes (pod) avec kubectl
kubectl delete -f <chemin_description_yml> 

### pour récupére la liste des pods 
kubectl get pods -o wide 

### kubectl exec -it <nom_pod> command

###Création des replicasets => en utilisant kubectl
kubectl create -f <chemin_replicaset>
# scaler les pods avec les replicasets
kubectl scale --replicas=3 replicaset first-replica

###List des replicasets
kubectl get replicasets

###logs pour un conteneur d'un pod
kubectl logs <nom_pod> -c <nom_conteneur>

###création d'un deploiment.
kubectl create -f <chemin_ressource>

###Changement d'image pour un dploiement 
kubectl set image deployment/<nom_deploiement> <nom_container>=<nouvelle image>

##Accéder à l'historique du déploiement 
kubectl rollout history deployment/<nom_deployment>
##retour vers une version d'un deploiement
kubectl rollout undo deployment/<nom_deployment> --to-revision=1

### Utilisation du autoscale avec les deployments
kubectl autoscale deployment <nom_deployment> --min=2 --max=5

### Création de service
kubectl create -f <chemin_vers_le_service>

##Commande pour build d'une image docker
docker build -t <nom_image> <chemin_vers_dockerfile> par exemple si la commande dans le dossier du dockefile <.>

##Après le build d'une image docker en local, on peut l'envoyer vers un cluster kind avec la commande suivante.
kind load docker-image <nom_image>

#Correction exercice app web
Etape 0: Préparation de kind pour ouvrir les ports(car on utilise kind comme cluster local)
Etape 1: build de l'image docker et envoie vers le cluster.
docker build -t web-app-image <chemin_vers_dockerfile>
kind --name with-config load docker-image web-app-image
Etape 2: Créer le déploiement avec le nombre de replicas et le pod.
##Après la création des ressources yaml pour le déploiement
kubectl create -f source-tp/app-web-source/k8s/deployment.yml
Etape 3: Créer le service pour envoyer le trafic vers notre application web.
##Après la création des ressources yaml pour un service nodePort
kubectl create -f source-tp/app-web-source/k8s/service.yml


### pour utiliser un namespace autre que default,
 on ajoute l'option -n <nom_namespace> avec une commande kubectl.


#ajouter un label à un node
kubectl label node <node_name> <key>=<value>
#pour supprimer un label d'un node
kubectl label node <node_name> <key>-